openapi: "3.0.3"

info:
  title: "Spring Thymeleaf example - V1"
  description: |
    An API developed using Thymeleaf and i18n to generate an PDF
  version: "0.0.1"

servers:
  - url: "http://localhost:3000"
    description: "development server"

tags:
  - name: "Pdf"
    description: |
      Requests to create the PDF
  - name: "Template"
    description: |
      Requests to test the template

paths:
  /v1/template/{id}:
    parameters:
      - $ref: "#/components/parameters/GenerationId"
      - $ref: "#/components/parameters/Name"
      - $ref: "#/components/parameters/Language"
    get:
      summary: "Receive the template"
      operationId: "getTemplate"
      tags:
        - "Template"
      responses:
        200:
          description: |
            Return an HTML with the processed template
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/Template"
              examples:
                Template_1:
                  $ref: "#/components/examples/Template_1"
          headers:
            Content-Type:
              $ref: "#/components/headers/Content-Type"
            Date:
              $ref: "#/components/headers/Date"
            Keep-Alive:
              $ref: "#/components/headers/Keep-Alive"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/400"

  /v1/pdf/{id}:
    parameters:
      - $ref: "#/components/parameters/GenerationId"
      - $ref: "#/components/parameters/Name"
      - $ref: "#/components/parameters/Language"
    get:
      summary: "Generate the Base64 PDF"
      operationId: "getPdf"
      tags:
        - "Pdf"
      responses:
        200:
          description: |
            Return a base64 pdf
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pdf"
              examples:
                Pdf_1:
                  $ref: "#/components/examples/Pdf_1"
          headers:
            Content-Type:
              $ref: "#/components/headers/Content-Type"
            Date:
              $ref: "#/components/headers/Date"
            Keep-Alive:
              $ref: "#/components/headers/Keep-Alive"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/400"

components:
  headers:
    Content-Type:
      description: "Type of the content"
      schema:
        type: "string"
    Date:
      description: "Response date (now)"
      schema:
        type: "string"
    Keep-Alive:
      description: "Timeout and a limit for requests on a connection"
      schema:
        type: "string"

  parameters:
    GenerationId:
      in: "path"
      name: "id"
      required: true
      description: |
        ID to find the template
      schema:
        type: "string"
        enum:
          - "book_template"

    Name:
      in: "query"
      name: "name"
      required: true
      description: |
        An parameter passed for code generation
      schema:
        type: "string"

    Language:
      in: "query"
      name: "lang"
      required: false
      description: |
        A parameter used for internalization (i18)
      schema:
        type: "string"
        enum:
          - "en"
          - "pt"

  schemas:
    Template:
      type: "string"

    Pdf:
      type: "object"
      required:
        - content
      properties:
        content:
          type: "string"

    Error:
      type: object
      description: |
        Error RFC7807
      required:
        - type
        - title
        - detail
        - status
        - instance
      properties:
        type:
          type: "string"
          description: "URI that explain the error"
        title:
          type: "string"
          description: "Shor title"
        detail:
          type: "string"
          description: "Detail message from error"
        status:
          type: "integer"
          description: "Response status"
        instance:
          type: "string"
          description: "Request path that throw error"
        properties:
          type: "object"
          description: "HashMap with additional information"

  responses:
    400:
      description: |
        Errors throwed when validating the request
      content:
        application/json+problem:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            Error_1:
              $ref: "#/components/examples/Error_1"
            Error_2:
              $ref: "#/components/examples/Error_2"

    500:
      description: |
        Error throwed by the application
      content:
        application/json+problem:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            Error_1:
              $ref: "#/components/examples/Error_1"
            Error_2:
              $ref: "#/components/examples/Error_2"

  examples:
    Template_1:
      summary: "Template_1"
      description: |
        Example of success template generation
      value: |
        <!DOCTYPE html>
        <html xmlns:th="http://www.thymeleaf.org" lang="en">
          <head>
            <title>Book Template</title>
            <meta charset="UTF-8" />
          </head>
          <body>
            <h1>Success</h1>
          </body>
        </html>

    Pdf_1:
      summary: "Pdf_1"
      description: |
        A base64 pdf generate from html template
      value: {
        content: "base64..."
      }

    Error_1:
      summary: "Error_1"
      description: |
        Error representation of RFC7807
      value: {
        type: "https://example.com/explanation",
        title: "Not resource found",
        detail: "The server could not find any resource in the request/path",
        status: 400,
        instance: "/v1/example"
      }

    Error_2:
      summary: "Error_2"
      description: |
        Error representation of RFC7807
      value: {
        type: "https://example.com/explanation",
        title: "Not resource found",
        detail: "The server could not find any resource in the request/path",
        status: 500,
        instance: "/v1/example",
        properties: {
          key: "value"
        }
      }
